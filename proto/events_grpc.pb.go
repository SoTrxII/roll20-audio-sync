// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: proto/events.proto

package jukebox_syncer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamClient interface {
	// Stream of events.
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventStream_StreamEventsClient, error)
	Start(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventStream_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[0], "/events.EventStream/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamStreamEventsClient{stream}
	return x, nil
}

type EventStream_StreamEventsClient interface {
	Send(*Event) error
	CloseAndRecv() (*EventReply, error)
	grpc.ClientStream
}

type eventStreamStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventStreamStreamEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventStreamStreamEventsClient) CloseAndRecv() (*EventReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStreamClient) Start(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordReply, error) {
	out := new(RecordReply)
	err := c.cc.Invoke(ctx, "/events.EventStream/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStreamClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := c.cc.Invoke(ctx, "/events.EventStream/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStreamServer is the server API for EventStream service.
// All implementations must embed UnimplementedEventStreamServer
// for forward compatibility
type EventStreamServer interface {
	// Stream of events.
	StreamEvents(EventStream_StreamEventsServer) error
	Start(context.Context, *RecordRequest) (*RecordReply, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	mustEmbedUnimplementedEventStreamServer()
}

// UnimplementedEventStreamServer must be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (UnimplementedEventStreamServer) StreamEvents(EventStream_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedEventStreamServer) Start(context.Context, *RecordRequest) (*RecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedEventStreamServer) Stop(context.Context, *StopRequest) (*StopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedEventStreamServer) mustEmbedUnimplementedEventStreamServer() {}

// UnsafeEventStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamServer will
// result in compilation errors.
type UnsafeEventStreamServer interface {
	mustEmbedUnimplementedEventStreamServer()
}

func RegisterEventStreamServer(s grpc.ServiceRegistrar, srv EventStreamServer) {
	s.RegisterService(&EventStream_ServiceDesc, srv)
}

func _EventStream_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStreamServer).StreamEvents(&eventStreamStreamEventsServer{stream})
}

type EventStream_StreamEventsServer interface {
	SendAndClose(*EventReply) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventStreamStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventStreamStreamEventsServer) SendAndClose(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventStreamStreamEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventStream_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventStream/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamServer).Start(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStream_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventStream/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStream_ServiceDesc is the grpc.ServiceDesc for EventStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _EventStream_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _EventStream_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventStream_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/events.proto",
}
